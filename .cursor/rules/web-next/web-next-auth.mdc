---
description: 
globs: 
alwaysApply: false
---
# Authentication in Web-Next

The web-next application uses Supabase for authentication with Next.js specific patterns including middleware and server-side authentication.

## Authentication Context

Authentication state is managed through React Context, similar to the client package but adapted for Next.js:

```tsx
// In components/providers/AuthProvider.tsx
'use client'

import { createContext, useContext, useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  // Auth provider implementation
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
```

## Using Authentication in Components

Components can access authentication state using the `useAuth` hook:

```tsx
'use client'

import { useAuth } from '@/components/providers/AuthProvider';
import { redirect } from 'next/navigation';

const ProfilePage = () => {
  const { user, isAuthenticated, isLoading } = useAuth();
  
  if (isLoading) return <div>Loading...</div>;
  if (!isAuthenticated) redirect('/login');
  
  return (
    <div>
      <h1>Welcome, {user.firstname}!</h1>
      {/* Rest of profile page */}
    </div>
  );
};
```

## Protected Pages with Next.js

Protected pages can use several approaches:

### Client-Side Protection

```tsx
'use client'

import { useAuth } from '@/components/providers/AuthProvider';
import { redirect } from 'next/navigation';
import { useEffect } from 'react';

export default function DashboardPage() {
  const { isAuthenticated, isLoading } = useAuth();
  
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      redirect('/login');
    }
  }, [isAuthenticated, isLoading]);
  
  if (isLoading) return <div>Loading...</div>;
  if (!isAuthenticated) return null;
  
  return <div>Dashboard Content</div>;
}
```

### Server-Side Protection with Middleware

```tsx
// middleware.ts
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });
  
  const {
    data: { session },
  } = await supabase.auth.getSession();
  
  // Protect dashboard routes
  if (req.nextUrl.pathname.startsWith('/dashboard') && !session) {
    return NextResponse.redirect(new URL('/login', req.url));
  }
  
  return res;
}

export const config = {
  matcher: ['/dashboard/:path*']
};
```

## Authentication Flow

1. User enters credentials in login form
2. Credentials are sent to Supabase Auth
3. On successful authentication, Supabase returns a JWT token
4. Token is stored in cookies (server-side) and localStorage (client-side)
5. Auth context is updated with user data
6. Next.js middleware protects routes on the server
7. Protected pages become accessible

## Login Page

```tsx
'use client'

import { useState } from 'react';
import { useAuth } from '@/components/providers/AuthProvider';
import { TextInput, PasswordInput, Button, Alert } from '@mantine/core';
import { useRouter } from 'next/navigation';

export default function LoginPage() {
  const { login } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await login(email, password);
      router.push('/dashboard');
    } catch (err) {
      setError('Login failed');
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <TextInput
        label="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <PasswordInput
        label="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      {error && <Alert color="red">{error}</Alert>}
      <Button type="submit">Login</Button>
    </form>
  );
}
```

## Root Layout with Auth Provider

```tsx
// app/layout.tsx
import { AuthProvider } from '@/components/providers/AuthProvider';
import { MantineProvider } from '@mantine/core';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <MantineProvider>
          <AuthProvider>
            {children}
          </AuthProvider>
        </MantineProvider>
      </body>
    </html>
  );
}
```

## Session Management

- Sessions are managed automatically by Supabase Auth Helpers for Next.js
- Server-side session handling through middleware
- Automatic token refresh
- Session restoration on page reload

## Permission-Based UI

```tsx
'use client'

const AdminButton = () => {
  const { user } = useAuth();
  
  if (!user?.permissions?.includes('manage_users')) {
    return null;
  }
  
  return <Button>Admin Action</Button>;
};
```

## Next.js Specific Auth Patterns

1. Use Server Components for initial auth checks when possible
2. Use Client Components for interactive auth features
3. Leverage middleware for route protection
4. Use cookies for server-side session persistence
5. Handle auth state in layouts for better UX
6. Use Next.js Image component for user avatars